package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"
	"strconv"
	"strings"

	"github.com/suimi34/golang-graphql/database"
	"github.com/suimi34/golang-graphql/graph/model"
	"golang.org/x/crypto/bcrypt"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	// ユーザー情報をGORMで取得
	var dbUser database.User
	userIDInt, err := strconv.Atoi(input.UserID)
	if err != nil {
		return nil, fmt.Errorf("無効なユーザーID: %v", err)
	}

	if err := r.GORMDB.First(&dbUser, userIDInt).Error; err != nil {
		return nil, fmt.Errorf("ユーザーが見つかりません: %v", err)
	}

	// TODOをGORMで作成
	dbTodo := database.Todo{
		Text:   input.Text,
		Done:   false,
		UserID: uint(userIDInt),
	}

	if err := r.GORMDB.Create(&dbTodo).Error; err != nil {
		return nil, fmt.Errorf("TODOの作成に失敗: %v", err)
	}

	// レスポンス用のモデルに変換
	user := &model.User{
		ID:        strconv.Itoa(int(dbUser.ID)),
		Name:      dbUser.Name,
		Email:     dbUser.Email,
		CreatedAt: dbUser.CreatedAt.Format("2006-01-02T15:04:05Z"),
		UpdatedAt: dbUser.UpdatedAt.Format("2006-01-02T15:04:05Z"),
	}

	todo := &model.Todo{
		ID:   strconv.Itoa(int(dbTodo.ID)),
		Text: dbTodo.Text,
		Done: dbTodo.Done,
		User: user,
	}
	return todo, nil
}

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.RegisterUserInput) (*model.RegisterUserResponse, error) {
	// バリデーション
	name := strings.TrimSpace(input.Name)
	email := strings.TrimSpace(input.Email)
	password := input.Password

	if name == "" || email == "" || password == "" {
		return &model.RegisterUserResponse{
			Success: false,
			Message: "すべてのフィールドを入力してください",
			User:    nil,
		}, nil
	}

	if len(password) < 6 {
		return &model.RegisterUserResponse{
			Success: false,
			Message: "パスワードは6文字以上で入力してください",
			User:    nil,
		}, nil
	}

	// メールアドレスの重複チェック
	var existingUser database.User
	if err := r.GORMDB.Where("email = ?", email).First(&existingUser).Error; err == nil {
		return &model.RegisterUserResponse{
			Success: false,
			Message: "このメールアドレスは既に登録されています",
			User:    nil,
		}, nil
	}

	// パスワードのハッシュ化
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		return &model.RegisterUserResponse{
			Success: false,
			Message: "パスワードの処理中にエラーが発生しました",
			User:    nil,
		}, nil
	}

	// ユーザーを作成
	user := database.User{
		Name:     name,
		Email:    email,
		Password: string(hashedPassword),
	}

	if err := r.GORMDB.Create(&user).Error; err != nil {
		return &model.RegisterUserResponse{
			Success: false,
			Message: "ユーザー登録中にエラーが発生しました",
			User:    nil,
		}, nil
	}

	// レスポンス用のモデルに変換
	responseUser := &model.User{
		ID:        strconv.Itoa(int(user.ID)),
		Name:      user.Name,
		Email:     user.Email,
		CreatedAt: user.CreatedAt.Format("2006-01-02T15:04:05Z"),
		UpdatedAt: user.UpdatedAt.Format("2006-01-02T15:04:05Z"),
	}

	return &model.RegisterUserResponse{
		Success: true,
		Message: "ユーザー登録が完了しました",
		User:    responseUser,
	}, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	// GORMでTODO一覧を取得（Userも含む）
	var dbTodos []database.Todo
	if err := r.GORMDB.Preload("User").Order("created_at DESC").Find(&dbTodos).Error; err != nil {
		return nil, fmt.Errorf("TODO取得エラー: %v", err)
	}

	// レスポンス用のモデルに変換
	var todos []*model.Todo
	for _, dbTodo := range dbTodos {
		user := &model.User{
			ID:        strconv.Itoa(int(dbTodo.User.ID)),
			Name:      dbTodo.User.Name,
			Email:     dbTodo.User.Email,
			CreatedAt: dbTodo.User.CreatedAt.Format("2006-01-02T15:04:05Z"),
			UpdatedAt: dbTodo.User.UpdatedAt.Format("2006-01-02T15:04:05Z"),
		}

		todo := &model.Todo{
			ID:   strconv.Itoa(int(dbTodo.ID)),
			Text: dbTodo.Text,
			Done: dbTodo.Done,
			User: user,
		}
		todos = append(todos, todo)
	}

	return todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
