package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"strconv"

	"github.com/suimi34/golang-graphql/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	// ユーザー情報をデータベースから取得
	var user model.User
	err := r.DB.QueryRow("SELECT id, name, email, created_at, updated_at FROM users WHERE id = ?", input.UserID).Scan(
		&user.ID, &user.Name, &user.Email, &user.CreatedAt, &user.UpdatedAt)
	if err != nil {
		return nil, fmt.Errorf("ユーザーが見つかりません: %v", err)
	}

	// TODOをデータベースに挿入
	result, err := r.DB.Exec("INSERT INTO todos (text, done, user_id) VALUES (?, ?, ?)", input.Text, false, input.UserID)
	if err != nil {
		return nil, fmt.Errorf("TODOの作成に失敗: %v", err)
	}

	todoID, err := result.LastInsertId()
	if err != nil {
		return nil, fmt.Errorf("TODO IDの取得に失敗: %v", err)
	}

	todo := &model.Todo{
		ID:   strconv.FormatInt(todoID, 10),
		Text: input.Text,
		Done: false,
		User: &user,
	}
	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	// データベースからTODO一覧を取得
	query := `
		SELECT t.id, t.text, t.done, t.user_id,
		       u.id, u.name, u.email, u.created_at, u.updated_at
		FROM todos t
		JOIN users u ON t.user_id = u.id
		ORDER BY t.created_at DESC
	`
	rows, err := r.DB.Query(query)
	if err != nil {
		return nil, fmt.Errorf("TODO取得エラー: %v", err)
	}
	defer rows.Close()

	var todos []*model.Todo
	for rows.Next() {
		var todo model.Todo
		var user model.User
		var userID string

		if err := rows.Scan(&todo.ID, &todo.Text, &todo.Done, &userID,
			&user.ID, &user.Name, &user.Email, &user.CreatedAt, &user.UpdatedAt); err != nil {
			continue
		}

		todo.User = &user
		todos = append(todos, &todo)
	}

	return todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
