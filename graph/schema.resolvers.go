package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"strconv"

	"github.com/suimi34/golang-graphql/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	// ユーザー情報をデータベースから取得
	var user model.User
	var email string
	fmt.Printf("inp: %v", input.UserID)
	err := r.DB.QueryRow("SELECT id, name, email FROM users WHERE id = ?", input.UserID).Scan(&user.ID, &user.Name, &email)
	if err != nil {
		return nil, fmt.Errorf("ユーザーが見つかりません: %v", err)
	}

	todo := &model.Todo{
		ID:   "new-todo-id",
		Text: input.Text,
		Done: false,
		User: &user,
	}
	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	// データベースからユーザー一覧を取得して返す例
	rows, err := r.DB.Query("SELECT id, name, email FROM users LIMIT 10")
	if err != nil {
		return nil, fmt.Errorf("ユーザー取得エラー: %v", err)
	}
	defer rows.Close()

	var todos []*model.Todo
	for rows.Next() {
		var id int
		var name, email string
		if err := rows.Scan(&id, &name, &email); err != nil {
			continue
		}

		todo := &model.Todo{
			ID:   strconv.Itoa(id),
			Text: fmt.Sprintf("Todo for %s", name),
			Done: false,
			User: &model.User{
				ID:   strconv.Itoa(id),
				Name: name,
			},
		}
		todos = append(todos, todo)
	}

	return todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
